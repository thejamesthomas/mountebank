#!/usr/bin/env node
'use strict';

var mountebank = require('../src/mountebank'),
    cli = require('../src/util/cli'),
    fs = require('fs'),
    path = require('path'),
    http = require('http'),
    thisPackage = require('../package.json'),
    Q = require('q'),
    ejs = require('ejs'),
    isWindows = require('os').platform().indexOf('win') === 0,
    killWait = isWindows ? 1000 : 0;

function usage () {
    console.log('Usage: mb [command] [options...]');
    console.log('Commands: start, stop, restart, help (defaults to start)');
    console.log('Options:');
    console.log('    --port PORT       the port to run the mountebank server on (default 2525)');
    console.log('    --configfile      file to load imposters from, can be an EJS template');
    console.log('    --pidfile FILE    where the pid is stored for the stop command (default mb.pid)');
    console.log('    --logfile FILE    file used for all log (default mb.log)');
    console.log('    --loglevel LEVEL  level for terminal logs (default info)');
    console.log('    --allowInjection  set to allow JavaScript injection');
    console.log('    --mock            remember requests for mock verification');
    console.log('    --version         show the mountebank version and exit');
    console.log('    --allowCORS       allow Cross-Origin Site Requests to mountebank server');
    console.log('    --debug           include stub match information in imposter retrievals for debugging purposes');
}

function error (message) {
    console.error(message + '\n');
    usage();
    process.exit(1);
}

function processExists(pid) {
    try {
        // "As a special case, signal 0 can be used to test existence of process"
        // https://nodejs.org/api/process.html#process_process_kill_pid_signal
        process.kill(pid, 0);
        return true;
    }
    catch (e) {
        return false;
    }
}

function serverAt (options) {

    function willKill () {
        if (!fs.existsSync(options.pidfile)) {
            return false;
        }

        var pid = fs.readFileSync(options.pidfile);
        return processExists(pid);
    }

    return {
        start: function () {
            var server = mountebank.create(options);

            fs.writeFileSync(options.pidfile, process.pid.toString());
            var shutdown = function shutdown () {
                if (fs.existsSync(options.pidfile)) {
                    fs.unlinkSync(options.pidfile);
                }
                server.close();
                process.exit();
            };
            process.on('SIGINT', shutdown);
            process.on('SIGTERM', shutdown);
        },

        stop: function () {
            if (!fs.existsSync(options.pidfile)) {
                return;
            }

            var pid = fs.readFileSync(options.pidfile);

            if (processExists(pid)) {
                process.kill(pid);
            }
            else {
                fs.unlinkSync(options.pidfile);
            }
        },

        restart: function () {
            var timeToWait = willKill() ? killWait : 0;
            this.stop();

            // Need a delay or get an address in use error
            setTimeout(this.start, timeToWait);
        }
    };
}

function shouldLoadConfigFile (commandLine) {
    return commandLine.options.configfile !== '' && commandLine.command.indexOf('start') >= 0;
}

function putConfig (options, body) {
    var deferred = Q.defer(),
        requestOptions = {
            method: 'PUT',
            path: '/imposters',
            port: options.port,
            hostname: 'localhost',
            headers: {
                'Content-Type': 'application/json',
                Connection: 'close'
            }
        },
        request = http.request(requestOptions, function (response) {
            response.body = '';
            response.setEncoding('utf8');
            response.on('data', function (chunk) { response.body += chunk; });
            response.on('end', function () {
                response.body = JSON.parse(response.body);
                deferred.resolve(response);
            });
        });

    request.on('error', deferred.reject);

    request.write(body);
    request.end();
    return deferred.promise;
}

function stringify (filename, includeFile) {
    var resolvedPath = path.join(path.dirname(filename), includeFile),
        contents = fs.readFileSync(resolvedPath, 'utf8'),
        jsonString = JSON.stringify(contents);

    // get rid of the surrounding quotes because it makes the templates more natural to quote them there
    return jsonString.substring(1, jsonString.length - 1);
}

function loadConfig (commandLine) {
    var configContents = fs.readFileSync(commandLine.options.configfile, 'utf8'),
        parsedContents = ejs.render(configContents, {
            filename: commandLine.options.configfile,
            stringify: stringify,
            inject: stringify       // backwards compatibility
        }),
        json = JSON.parse(parsedContents),
        imposters = json.imposters;

    if (!imposters) {
        // Assume they left off the outer imposters array
        imposters = [json];
    }

    return putConfig(commandLine.options, JSON.stringify({ imposters: imposters }));
}

try {
    var defaultOptions = {
            port: 2525,
            pidfile: 'mb.pid',
            logfile: 'mb.log',
            loglevel: 'info',
            configfile: '',
            keyfile: '',
            certfile: ''
        },
        booleanOptions = ['allowInjection', 'mock', 'heroku', 'version', 'allowCORS', 'debug'],
        commandLine = cli.parse(process.argv.slice(2), defaultOptions, booleanOptions),
        server = serverAt(commandLine.options);

    if (commandLine.options.version) {
        console.log(thisPackage.version);
    }
    else {
        switch (commandLine.command) {
            case 'start':
                server.start();
                break;
            case 'stop':
                server.stop();
                break;
            case 'restart':
                server.restart();
                break;
            case 'help':
                usage();
                break;
            default:
                error("Invalid command '" + commandLine.command + "'.");
                break;
        }

        if (shouldLoadConfigFile(commandLine)) {
            loadConfig(commandLine);
        }
    }
}
catch (err) {
    error(err.message);
}
